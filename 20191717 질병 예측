{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0GkxDzbSEc4o"
      },
      "source": [
        "# 머신러닝을 활용한 질병 예측 프로젝트\n",
        "\n",
        "이 데이터셋은 머신러닝 기반 질병 분류 모델을 구현하고 평가합니다."
      ],
      "id": "0GkxDzbSEc4o"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MJs4JeD_Ec4p"
      },
      "source": [
        "## 1. 데이터 수집\n",
        "Kaggle의 해당 링크: https://www.kaggle.com/code/mohamedtarek111/diseases-prediction-with-100-acc/notebook\n",
        "데이터셋 사용."
      ],
      "id": "MJs4JeD_Ec4p"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "or2yqHmREc4q"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "\n",
        "data = pd.read_csv('Training.csv')\n",
        "print(data.shape)\n",
        "data.head()"
      ],
      "id": "or2yqHmREc4q"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tGkOXncTEc4q"
      },
      "source": [
        "## 2. 전처리\n",
        "- Label Encoding\n",
        "- 결측치 처리\n",
        "- 스케일링"
      ],
      "id": "tGkOXncTEc4q"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5pxo30ejEc4q"
      },
      "outputs": [],
      "source": [
        "# 예시\n",
        "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
        "\n",
        "X = data.drop(columns=['prognosis'])\n",
        "y = data['prognosis']\n",
        "\n",
        "le = LabelEncoder()\n",
        "y_encoded = le.fit_transform(y)\n",
        "\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)"
      ],
      "id": "5pxo30ejEc4q"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Uqops1XBEc4r"
      },
      "source": [
        "## 3. 모델 학습\n",
        "- 로지스틱 회귀\n",
        "- 랜덤 포레스트"
      ],
      "id": "Uqops1XBEc4r"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yKm-MfznEc4r"
      },
      "outputs": [],
      "source": [
        "# 예시\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_encoded, test_size=0.2, random_state=42)\n",
        "\n",
        "rf = RandomForestClassifier()\n",
        "rf.fit(X_train, y_train)\n",
        "\n",
        "lr = LogisticRegression(max_iter=1000)\n",
        "lr.fit(X_train, y_train)"
      ],
      "id": "yKm-MfznEc4r"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QUhJd9daEc4r"
      },
      "source": [
        "## 4. 예측 결과 및 성능 평가\n",
        "- 정확도, 혼동 행렬, 분류"
      ],
      "id": "QUhJd9daEc4r"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4WLZsE7oEc4r"
      },
      "outputs": [],
      "source": [
        "# 평가\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
        "\n",
        "pred_rf = rf.predict(X_test)\n",
        "pred_lr = lr.predict(X_test)\n",
        "\n",
        "print(\"[Random Forest]\")\n",
        "print(\"Accuracy:\", accuracy_score(y_test, pred_rf))\n",
        "print(confusion_matrix(y_test, pred_rf))\n",
        "print(classification_report(y_test, pred_rf))\n",
        "\n",
        "print(\"\\n[Logistic Regression]\")\n",
        "print(\"Accuracy:\", accuracy_score(y_test, pred_lr))\n",
        "print(confusion_matrix(y_test, pred_lr))\n",
        "print(classification_report(y_test, pred_lr))"
      ],
      "id": "4WLZsE7oEc4r"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UWwdlAKUEc4s"
      },
      "source": [
        "## 5. 결론 및 향후 발전 방향\n",
        "- 랜덤 포레스트가 비교적 높은 정확도 보임\n",
        "- 딥러닝 모델 또는 앙상블 학습으로 성능 개선 가능\n",
        "- 실제 EMR 데이터와 결합 시 임상적 활용 가능성 높음"
      ],
      "id": "UWwdlAKUEc4s"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.11"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}